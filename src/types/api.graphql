### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
Represents a unique Account created for every User. Stores information regarding the User's login information. Used by NExtAuth.
"""
type Account {
  """
  The AccessToken of the Account. Used by NextAuth
  """
  access_token: String

  """
  The time that the AccessToken of the Account expires. Used by NextAuth
  """
  expires_at: Int

  """
  Unique PK and ID of the Account Entity
  """
  id: String!

  """
  The IdToken of the Account. Used by NextAuth
  """
  id_token: String

  """
  The Provider of the Account. Used by NextAuth
  """
  provider: String!

  """
  The Id of the Provider of the Account. Used by NextAuth
  """
  providerAccountId: String!

  """
  The RefreshToken of the Account. Used by NextAuth
  """
  refresh_token: String

  """
  The scope of the Account. Used by NextAuth
  """
  scope: String

  """
  The SessionState of the Account. Used by NextAuth
  """
  session_state: String

  """
  The type of the AccessToken of the Account. Used by NextAuth
  """
  token_type: String

  """
  Account type. Used by NextAuth
  """
  type: String!

  """
  Reference to the User that the Account belongs to. Relational field used by Prisma
  """
  user: User

  """
  Id of the User that the Account belongs to
  """
  userId: String!
}

"""
Represents a unique Blog of the App created by a User. Stores all information regarding the Blog.
"""
type Blog {
  """
  Reference to the User that create the Blog. This is a relational field created by Prisma
  """
  author: User

  """
  The unique Id of the User that created the Blog
  """
  authorId: String!

  """
  All BlogPosts that belongs to the Blog
  """
  blogPosts: [BlogPost]!

  """
  Time-stamp of creation as set by Prisma
  """
  createdAt: DateTime

  """
  A public human readable and customizable description of the Blog.
  """
  description: String

  """
  Unique PK and ID of the Blog Entity
  """
  id: String!

  """
  The unique human readable name of the Blog
  """
  name: String

  """
  Time-stamp of last update as set by Prisma
  """
  updatedAt: DateTime
}

"""
Input arguments for querying Blogs by Id
"""
input BlogByIdInput {
  id: String!
}

"""
Represents a unique BlogComment of the App created by a User. Stores all information regarding the BlogComment.
"""
type BlogComment {
  """
  Reference to the User that create the BlogComment. This is a relational field created by Prisma
  """
  author: User

  """
  The Id of the User that created the BlogComment
  """
  authorId: String!

  """
  The BlogComments that are children of this BlogComment
  """
  blogComments: [BlogComment]

  """
  The BlogPost that the BlogComment belongs to
  """
  blogPost: BlogPost

  """
  The Id of the BlogPost that the BlogComment belongs to
  """
  blogPostId: String!

  """
  The User created content of the BlogComment
  """
  content: String!

  """
  Time-stamp of creation as set by Prisma
  """
  createdAt: DateTime

  """
  Unique PK and ID of the BlogComment Entity
  """
  id: String!

  """
  The Parent BlogComment of the BlogComment. Can be Null if the BlogComment is a direct reply to the BlogPost and not to a BlogComment.
  """
  parent: BlogComment

  """
  The Id of the Parent BlogComment. Can be Null if the BlogComment has no Parent.
  """
  parentId: String

  """
  Time-stamp of last update as set by Prisma
  """
  updatedAt: DateTime
}

"""
Input arguments for querying Blogs by Id
"""
input BlogCommentByIdInput {
  id: String!
}

"""
Input arguments for querying BlogComments by their Parent BlogComment Id. Search for the BlogComments that replied to a specific BlogComment
"""
input BlogCommentsByParentCommentIdInput {
  """
  The Id of the Parent BlogComment of the BlogComment to search for.
  """
  id: String!
}

"""
Input arguments for querying BlogComments by BlogPost Id. Search for the BlogComments of a specific BlogPost
"""
input BlogCommentsByPostIdInput {
  """
  The Id of the BlogPost that the BlogComments belongs to
  """
  id: String!
}

"""
Input arguments for querying BlogComments by User Id. Search for BlogComments of a specific User
"""
input BlogCommentsByUserIdInput {
  """
  The Id of the User that the BlogComment belongs to
  """
  id: String!
}

"""
Represents a unique BlogPost of the App created by a User. Stores all information regarding the BlogPost.
"""
type BlogPost {
  """
  Reference to the User that created the BlogPost. Relational field created by Prisma.
  """
  author: User

  """
  The unique Id of the User that created the BlogPost.
  """
  authorId: String!

  """
  The Blog that the BlogPost belongs to
  """
  blog: Blog

  """
  All BlogComments that belong to the BlogPost
  """
  blogComments: [BlogComment]

  """
  The Id of the Blog that the BlogPost belongs to
  """
  blogId: String!

  """
  The human readable Content set by the User
  """
  content: String!

  """
  Time-stamp of creation as set by Prisma
  """
  createdAt: DateTime

  """
  Unique PK and ID of the BlogPost Entity
  """
  id: String!

  """
  Boolean value of whether the User has published the BlogPost and want it to be shown publicly.
  """
  published: Boolean!

  """
  The human readable Title set by the User
  """
  title: String!

  """
  Time-stamp of last update as set by Prisma
  """
  updatedAt: DateTime
}

"""
Input arguments for querying BlogPosts by Id
"""
input BlogPostByIdInput {
  id: String!
}

"""
Input arguments for querying all BlogPosts for a given Blog id
"""
input BlogPostsByBlogIdInput {
  """
  The Id of the Blog that the BlogPost belongs to
  """
  id: String!
}

"""
Input arguments for querying BlogPosts by a User Id. Search for the BlogPosts of a specific User
"""
input BlogPostsByUserIdInput {
  """
  The Id of the User that the Post belongs to
  """
  id: String!
}

"""
Input arguments for querying Blogs by User Id. Search for the Blogs of a specific User
"""
input BlogsByUserIdInput {
  """
  The Id of the User that the Blogs belongs to
  """
  id: String!
}

"""
Create a new BlogComment as a User
"""
input CreateBlogCommentInput {
  """
  The Id of the User to create the BlogComment as
  """
  authorId: String!

  """
  The Id of the BlogPost that the BlogComment belongs to
  """
  blogPostId: String!

  """
  The content of the new BlogComment to create
  """
  content: String!

  """
  The parentId of the new BlogComment to create
  """
  parentId: String
}

"""
Create a new Blog as a User
"""
input CreateBlogInput {
  """
  The Id of the User to create the Blog as
  """
  authorId: String!

  """
  The description of the new Blog to create
  """
  description: String!

  """
  The name of the new Blog to create
  """
  name: String!
}

"""
Create a new BlogPost as a User
"""
input CreateBlogPostInput {
  """
  The Id of the User to create the BlogPost as
  """
  authorId: String!

  """
  The Id of the Blog to post the BlogPost under
  """
  blogId: String!

  """
  The content of the new BlogPost to create
  """
  content: String!

  """
  Whether the BlogPost should be immeadiatly visible to other users
  """
  published: Boolean!

  """
  The title of the new BlogPost to create
  """
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  """
  Mutation for updating an existing BlogComment as a User
  """
  UpdateBlogCommentInput(data: UpdateBlogCommentInput!): BlogComment

  """
  Mutation for creating a new Blog as a User
  """
  createBlog(data: CreateBlogInput!): Blog

  """
  Mutation for creating a new BlogComment as a User
  """
  createBlogComment(data: CreateBlogCommentInput!): BlogComment

  """
  Mutation for creating a new BlogPost as a User
  """
  createBlogPost(data: CreateBlogPostInput!): Blog

  """
  Mutation for updating an existing Blog as a User
  """
  updateBlog(data: UpdateBlogInput!): Blog

  """
  Mutation for updating an existing BlogPost as a User
  """
  updateBlogPost(data: UpdateBlogPostInput!): Blog

  """
  Mutation for updating a User
  """
  updateUser(data: UpdateUserInput!): User
}

type Query {
  """
  Query all BlogComments
  """
  allBlogComments: [BlogComment]

  """
  Query all BlogPosts
  """
  allBlogPosts: [BlogPost]

  """
  Query all Blog
  """
  allBlogs: [Blog]

  """
  Query all User
  """
  allUsers: [User]

  """
  Query for a single Blog by Id
  """
  blogById(data: BlogByIdInput!): Blog

  """
  Query for a single BlogComment by Id
  """
  blogCommentById(data: BlogCommentByIdInput!): BlogComment

  """
  Query for all BlogComments that belong to a specific Parent BlogComment
  """
  blogCommentsByParentCommentId(data: BlogCommentsByParentCommentIdInput!): [BlogComment]!

  """
  Query for all BlogComments that belong to a specific BlogPost
  """
  blogCommentsByPostId(data: BlogCommentsByPostIdInput!): [BlogComment]!

  """
  Query for all BlogComments that belong to a specific User
  """
  blogCommentsByUserId(data: BlogCommentsByUserIdInput!): [BlogComment]!

  """
  Query for a single BlogPost by Id
  """
  blogPostById(data: BlogPostByIdInput!): BlogPost

  """
  Query for all BlogPosts that belong to a specific Blog
  """
  blogPostsByBlogId(data: BlogPostsByBlogIdInput!): [BlogPost]!

  """
  Query for all BlogPosts that belong to a specific User
  """
  blogPostsByUserId(data: BlogPostsByUserIdInput!): [BlogPost]!

  """
  Query for all Blogs that belong to a specific User by userId
  """
  blogsByUserId(data: BlogsByUserIdInput!): [Blog]!

  """
  Query for a single User by Email.
  """
  userByEmail(data: UserByEmailInput): User

  """
  Query for a single User by Id
  """
  userById(data: UserByIdInput!): User

  """
  Query for a single User by Username
  """
  userByUsername(data: UserByUsernameInput): User
}

"""
Unique Session used by NextAuth
"""
type Session {
  """
  Time that the Session expires. Used by NextAuth
  """
  expires: DateTime

  """
  Unique PK ID of the Session Entity
  """
  id: String!

  """
  The SessionToken. Used by NextAuth
  """
  sessionToken: String!

  """
  Reference field to the User that the Session belongs to. Relational field used by Prisma
  """
  user: User

  """
  The Id of the User that the SessionToken belongs to. Used by NextAuth
  """
  userId: String!
}

"""
Update an existing BlogComment's information
"""
input UpdateBlogCommentInput {
  """
  The new content of the BlogComment
  """
  content: String!

  """
  The Id of the BlogComment to update
  """
  id: String!
}

"""
Update an existing Blog's information
"""
input UpdateBlogInput {
  """
  The new description of the Blog
  """
  description: String!

  """
  The Id of the Blog to update
  """
  id: String!
}

"""
Update an existing BlogPost's information
"""
input UpdateBlogPostInput {
  """
  The new content of the BlogPost
  """
  content: String

  """
  The Id of the BlogPost to update
  """
  id: String!

  """
  Whether the BlogPost should be visible to other Users
  """
  published: Boolean

  """
  The new title of the BlogPost
  """
  title: String
}

"""
Input arguments for mutation a User
"""
input UpdateUserInput {
  bio: String!
  id: String!
}

"""
Represents a unique User of the App. Stores all information regarding the User. Is derived from the base state of NextAuth and extended with extra fields for added features.
"""
type User {
  """
  Accounts of the User. Relational fields used by both Prisma and NextAuth
  """
  accounts: [Account]

  """
  User customizable and human readable bio of the User
  """
  bio: String

  """
  References to all the BlogComments created by the User. This is a relational field created by Prisma
  """
  blogComments: [BlogComment]

  """
  References to all the BlogPosts created by the User. This is a relational field created by Prisma
  """
  blogPosts: [BlogPost]

  """
  References to all the Blogs created by the User. This is a relational field created by Prisma
  """
  blogs: [Blog]

  """
  Time-stamp of creation as set by Prisma
  """
  createdAt: DateTime

  """
  Unique email address of the User Entity. If the USer used a third party service to sign up, this will automatically be set and verified by that service
  """
  email: String

  """
  DateTime of when the User's email was verified
  """
  emailVerified: DateTime

  """
  Unique PK and ID of the User Entity
  """
  id: String!

  """
  URI of the User's profile image as provided by third party services
  """
  image: String

  """
  The name of the User. Provided by third party login services. Used by NextAuth
  """
  name: String

  """
  Sessions that belong to the User. Relational fields used by both Prisma and NextAuth
  """
  sessions: [Session]

  """
  Time-stamp of last update as set by Prisma
  """
  updatedAt: DateTime

  """
  Unique human readable username of the User Entity. If the User used a third party service to sign up, this will initially be null
  """
  username: String
}

"""
Input arguments for querying Users by Email
"""
input UserByEmailInput {
  email: String
}

"""
Input arguments for querying Users by Id
"""
input UserByIdInput {
  id: String!
}

"""
Input arguments for querying Users by Username
"""
input UserByUsernameInput {
  username: String
}

"""
Unique VerificationToken used by NextAuth
"""
type VerificationToken {
  """
  Time that the token expires. Used by NextAuth
  """
  expires: String!

  """
  The identifier of the VerificationToken. Used by NextAuth
  """
  identifier: String!

  """
  The token of the VerificationToken. Used by NextAuth
  """
  token: String!
}
