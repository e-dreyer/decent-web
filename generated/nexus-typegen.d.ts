/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../src/types/Context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Blog: { // root type
    authorId?: number | null; // Int
    createdAt: string; // String!
    description?: string | null; // String
    id: string; // ID!
    name?: string | null; // String
    updatedAt: string; // String!
  }
  BlogComment: { // root type
    authorId: number; // Int!
    blogPostId: number; // Int!
    content: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    parentId: number; // Int!
    updatedAt: string; // String!
  }
  BlogPost: { // root type
    authorId: number; // Int!
    blogComments?: Array<NexusGenRootTypes['BlogComment'] | null> | null; // [BlogComment]
    blogId: number; // Int!
    content: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    published: boolean; // Boolean!
    title: string; // String!
    updatedAt: string; // String!
  }
  Profile: { // root type
    bio?: string | null; // String
    createdAt: string; // String!
    id: string; // ID!
    updatedAt: string; // String!
    userId?: number | null; // Int
  }
  Query: {};
  User: { // root type
    createdAt: string; // String!
    email: string; // String!
    id: string; // ID!
    updatedAt: string; // String!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Blog: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    authorId: number | null; // Int
    blogPosts: Array<NexusGenRootTypes['BlogPost'] | null> | null; // [BlogPost]
    createdAt: string; // String!
    description: string | null; // String
    id: string; // ID!
    name: string | null; // String
    updatedAt: string; // String!
  }
  BlogComment: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    authorId: number; // Int!
    blogComments: Array<NexusGenRootTypes['BlogComment'] | null> | null; // [BlogComment]
    blogPost: NexusGenRootTypes['BlogPost'] | null; // BlogPost
    blogPostId: number; // Int!
    content: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    parent: NexusGenRootTypes['BlogComment'] | null; // BlogComment
    parentId: number; // Int!
    updatedAt: string; // String!
  }
  BlogPost: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    authorId: number; // Int!
    blog: NexusGenRootTypes['Blog'] | null; // Blog
    blogComments: Array<NexusGenRootTypes['BlogComment'] | null> | null; // [BlogComment]
    blogId: number; // Int!
    content: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    published: boolean; // Boolean!
    title: string; // String!
    updatedAt: string; // String!
  }
  Profile: { // field return type
    bio: string | null; // String
    createdAt: string; // String!
    id: string; // ID!
    updatedAt: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: number | null; // Int
  }
  Query: { // field return type
    blogComments: Array<NexusGenRootTypes['BlogComment'] | null> | null; // [BlogComment]
    blogPosts: Array<NexusGenRootTypes['BlogPost'] | null> | null; // [BlogPost]
    blogs: Array<NexusGenRootTypes['Blog'] | null> | null; // [Blog]
    profiles: Array<NexusGenRootTypes['Profile'] | null> | null; // [Profile]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    blogComments: Array<NexusGenRootTypes['BlogComment'] | null> | null; // [BlogComment]
    blogPosts: Array<NexusGenRootTypes['BlogPost'] | null> | null; // [BlogPost]
    blogs: Array<NexusGenRootTypes['Blog'] | null> | null; // [Blog]
    createdAt: string; // String!
    email: string; // String!
    id: string; // ID!
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    updatedAt: string; // String!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Blog: { // field return type name
    author: 'User'
    authorId: 'Int'
    blogPosts: 'BlogPost'
    createdAt: 'String'
    description: 'String'
    id: 'ID'
    name: 'String'
    updatedAt: 'String'
  }
  BlogComment: { // field return type name
    author: 'User'
    authorId: 'Int'
    blogComments: 'BlogComment'
    blogPost: 'BlogPost'
    blogPostId: 'Int'
    content: 'String'
    createdAt: 'String'
    id: 'ID'
    parent: 'BlogComment'
    parentId: 'Int'
    updatedAt: 'String'
  }
  BlogPost: { // field return type name
    author: 'User'
    authorId: 'Int'
    blog: 'Blog'
    blogComments: 'BlogComment'
    blogId: 'Int'
    content: 'String'
    createdAt: 'String'
    id: 'ID'
    published: 'Boolean'
    title: 'String'
    updatedAt: 'String'
  }
  Profile: { // field return type name
    bio: 'String'
    createdAt: 'String'
    id: 'ID'
    updatedAt: 'String'
    user: 'User'
    userId: 'Int'
  }
  Query: { // field return type name
    blogComments: 'BlogComment'
    blogPosts: 'BlogPost'
    blogs: 'Blog'
    profiles: 'Profile'
    users: 'User'
  }
  User: { // field return type name
    blogComments: 'BlogComment'
    blogPosts: 'BlogPost'
    blogs: 'Blog'
    createdAt: 'String'
    email: 'String'
    id: 'ID'
    profile: 'Profile'
    updatedAt: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}